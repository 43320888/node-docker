# This is a basic workflow to help you get started with Actions
name: CI to GHCR
on: # Controls when the workflow will run
  push: # Triggers the workflow on push event…
    branches: [ master ] # …but only for the master branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs: # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  build: # This workflow contains a single job called "build"
    runs-on: ubuntu-latest # The type of runner that the job will run on
    steps: # Steps represent a sequence of tasks that will be executed as part of the job
      - # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        name: Check Out Repo 
        uses: actions/checkout@v2
      - # This action uses BuildKit under the hood through a simple Buildx action which we will also setup
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - # Build cache snippets
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - # Use our PAT and username to log into Github
        name: Login to ghcr
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          # password: ${{ secrets.GHCR_TOKEN }}
      - 
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/node-docker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


